---
import { Image } from "astro:assets";

import SkillCenterImage from "../assets/skill.png";
import RustImage from "../assets/rust.svg";
import PythonImage from "../assets/python-original.svg";
import JSImage from "../assets/javascript-original.svg";
import TSImage from "../assets/typescript-original.svg";
import TailwindImage from "../assets/tailwindcss.svg";
import GitImage from "../assets/git-original.svg";
import PyTorchImage from "../assets/PyTorch.svg";
import FastAPIImage from "../assets/FastAPI.svg";
import AstroImage from "../assets/astro.svg";
import NextImage from "../assets/next.svg";
import ReactImage from "../assets/react.svg";

const techImages = [
    { src: RustImage, name: "" },
    { src: PythonImage, name: "" },
    { src: JSImage, name: "" },
    { src: TSImage, name: "" },
    { src: TailwindImage, name: "" },
    { src: GitImage, name: "" },
    { src: PyTorchImage, name: "" },
    { src: FastAPIImage, name: "" },
    { src: NextImage, name: "" },
    { src: AstroImage, name: "" },
    { src: ReactImage, name: "" },
];

const goldenAngle = 137.508; // degrees
const center = 50; // percent
const maxRadius = 60; // max % radius from center

const N = techImages.length; // number of images

const floatingImages = techImages.map((img, i) => {
    const t = (i + 1) / N; // normalized index (0â€“1)
    const angle = i * goldenAngle;
    const radius = maxRadius * Math.sqrt(t); // spiral that stays within bounds

    const x = center + radius * Math.cos((angle * Math.PI) / 180);
    const y = center + radius * Math.sin((angle * Math.PI) / 180);

    return {
        ...img,
        top: `${Math.min(Math.max(y, 0), 100)}`,
        left: `${Math.min(Math.max(x, 0), 100)}`,
        size: 48,
    };
});
---

<svg width="0" height="0">
    <filter id="crayon-noise">
        <feTurbulence
            type="turbulence"
            baseFrequency="0.9"
            numOctaves="2"
            result="turbulence"></feTurbulence>
        <feDisplacementMap
            in="SourceGraphic"
            in2="turbulence"
            scale="3"
            xChannelSelector="R"
            yChannelSelector="G"></feDisplacementMap>
    </filter>
</svg>

<section class="container mx-auto">
    <h3 class="section-heading">Skills</h3>

    <div class="w-full h-[70vh] relative">
        <div class="blob-bg"></div>

        <!-- Floating images -->
        {
            floatingImages.map((img, i) => (
                <Image
                    src={img.src}
                    class="floating"
                    style={`top: ${img.top}%; left: ${img.left}%; width: ${img.size || 40}px`}
                    alt="float"
                />
            ))
        }

        <!-- Stars -->
        {
            Array.from({ length: 30 }).map((_, i) => {
                const top = Math.random() * 100;
                const left = Math.random() * 100;
                const size = Math.random() * 3 + 2;
                const color = Math.random() > 0.5 ? "#fff" : "#ffccdd";
                const style = `top: ${top}%; left: ${left}%; width: ${size}px; height: ${size}px; background-color: ${color}`;
                return <div class="star" style={style} />;
            })
        }

        <Image src={SkillCenterImage} alt="racoon" class="raccoon" />
    </div>
</section>

<style>
    .blob-bg {
        position: absolute;
        top: 50%;
        left: 50%;
        width: 50%;
        height: 60%;
        background: #65475e;
        transform: translate(-50%, -50%);
        animation: morph 8s infinite ease-in-out;
        filter: url("#crayon-noise");
        /* mask-image: radial-gradient(circle, black 60%, transparent 100%); */
    }

    .floating {
        position: absolute;
        animation: float 3s ease-in-out infinite;
        z-index: 0;
    }

    @keyframes float {
        0%,
        100% {
            transform: translate(0, 0);
        }
        50% {
            transform: translate(-10px, -10px);
        }
    }

    .star {
        position: absolute;
        border-radius: 50%;
        animation: flicker 2s infinite ease-in-out;
        z-index: 0;
    }

    @keyframes flicker {
        0%,
        100% {
            opacity: 0.2;
        }
        50% {
            opacity: 1;
        }
    }

    .raccoon {
        position: absolute;
        top: 50%;
        left: 50%;
        width: 120px;
        transform: translate(-50%, -50%);
        z-index: 2;
    }

    @keyframes morph {
        0%,
        100% {
            border-radius: 40% 60% 70% 30% / 40% 40% 60% 50%;
        }
        34% {
            border-radius: 70% 30% 50% 50% / 30% 30% 70% 70%;
        }
        67% {
            border-radius: 100% 60% 60% 100% / 100% 100% 60% 60%;
        }
    }
</style>

<script lang="ts"></script>
