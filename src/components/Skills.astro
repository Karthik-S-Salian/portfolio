---
import { Image } from "astro:assets";

import SkillCenterImage from "../assets/skill.png";
import RustImage from "../assets/rust.svg";
import PythonImage from "../assets/python-original.svg";
import JSImage from "../assets/javascript-original.svg";
import TSImage from "../assets/typescript-original.svg";
import TailwindImage from "../assets/tailwindcss.svg";
import GitImage from "../assets/git-original.svg";
import PyTorchImage from "../assets/PyTorch.svg";
import FastAPIImage from "../assets/FastAPI.svg";
import AstroImage from "../assets/astro.svg";
import NextImage from "../assets/next.svg";
import ReactImage from "../assets/react.svg";
import LinuxImage from "../assets/linux-original.svg";

const techImages = [
    { src: RustImage, name: "" },
    { src: PythonImage, name: "" },
    { src: JSImage, name: "" },
    { src: TSImage, name: "" },
    { src: TailwindImage, name: "" },
    { src: GitImage, name: "" },
    { src: PyTorchImage, name: "" },
    { src: FastAPIImage, name: "" },
    { src: NextImage, name: "" },
    { src: AstroImage, name: "" },
    { src: ReactImage, name: "" },
    { src: LinuxImage, name: "" },
];

const goldenAngle = 137.508;
const center = 50;
const maxRadius = 60;

const N = techImages.length;

const floatingImages = techImages.map((img, i) => {
    const t = (i + 1) / N;
    const angle = i * goldenAngle;
    const radius = maxRadius * Math.sqrt(t); // spiral that stays within bounds

    const x = center + radius * Math.cos((angle * Math.PI) / 180);
    const y = center + radius * Math.sin((angle * Math.PI) / 180);

    return {
        ...img,
        top: `${Math.min(Math.max(y, 0), 100)}`,
        left: `${Math.min(Math.max(x, 0), 100)}`,
        animationDelay: `${Math.random() * 4}s`,
    };
});
---

<svg width="0" height="0">
    <filter id="crayon-noise">
        <feTurbulence
            type="turbulence"
            baseFrequency="0.9"
            numOctaves="2"
            result="turbulence"></feTurbulence>
        <feDisplacementMap
            in="SourceGraphic"
            in2="turbulence"
            scale="3"
            xChannelSelector="R"
            yChannelSelector="G"></feDisplacementMap>
    </filter>
</svg>

<section class="container mx-auto">
    <h3 class="section-heading">Skills</h3>

    <div class="w-full h-[70vh] relative grid place-content-center">
        <div class="blob-bg"></div>

        {
            floatingImages.map((img) => (
                <Image
                    src={img.src}
                    class="floating aspect-square w-8 md:w-10 lg:w-12"
                    style={`top: calc(min(${img.top}%, 100% - 4rem)); left: calc(min(${img.left}%, 100% - 4rem)); animation-delay: ${img.animationDelay}`}
                    alt="float"
                />
            ))
        }

        {
            Array.from({ length: 30 }).map((_, i) => {
                const top = Math.random() * 99.6;
                const left = Math.random() * 99.6;
                const size = Math.random() * 3 + 2;
                const color = Math.random() > 0.5 ? "#fff" : "#FFFFaa";
                const style = `top: ${top}%; left: ${left}%; width: ${size}px; height: ${size}px; background-color: ${color}; animation-delay:${Math.round(Math.random() * 500)}ms; animation-duration:${Math.round(1000 + Math.random() * 2000)}ms ;`;
                return <div class="star" style={style} />;
            })
        }

        <Image src={SkillCenterImage} alt="racoon" class="raccoon" />
    </div>
</section>

<style>
    .blob-bg {
        position: absolute;
        top: 50%;
        left: 50%;
        width: 80%;
        height: 70%;
        background: #65475e;
        transform: translate(-50%, -50%);
        animation: morph 8s infinite ease-in-out;
        filter: url("#crayon-noise");
        box-shadow: inset 0 0 8px rgba(0, 0, 0, 0.2);
    }

    @keyframes morph {
        0%,
        100% {
            border-radius: 45% 55% 60% 40% / 50% 40% 60% 50%;
        }
        34% {
            border-radius: 60% 40% 45% 55% / 40% 55% 45% 60%;
        }
        67% {
            border-radius: 50% 60% 40% 60% / 60% 50% 40% 55%;
        }
    }

    @keyframes float-robotic {
        0% {
            transform: translate(0, 0);
        }
        20% {
            transform: translate(4px, -4px);
        }
        40% {
            transform: translate(-3px, 1px);
        }
        60% {
            transform: translate(1px, 1px);
        }
        80% {
            transform: translate(-1px, -1px);
        }
        100% {
            transform: translate(0, 0);
        }
    }

    .floating {
        position: absolute;
        animation: float-robotic 6s ease-in-out infinite;
    }

    .star {
        position: absolute;
        border-radius: 50%;
        animation: flicker 2s infinite ease-in-out;
        z-index: 0;
        animation-duration: 750ms;
    }

    @keyframes flicker {
        0%,
        100% {
            opacity: 0.2;
        }
        50% {
            opacity: 1;
        }
    }

    .raccoon {
        width: 120px;
        z-index: 2;
        animation: raccoon-float 2s ease-in-out infinite;
    }

    @keyframes raccoon-float {
        0%,
        100% {
            transform: translate(5px, 5px);
        }
        50% {
            transform: translate(-5px, -5px);
        }
    }
</style>